diff --git a/src/dakota_python.cpp b/src/dakota_python.cpp
index 3c717bc..0def5df 100644
--- a/src/dakota_python.cpp
+++ b/src/dakota_python.cpp
@@ -92,7 +92,8 @@ namespace python {
     return resp.function_value(0);
   }
   
-  Dakota::LibraryEnvironment* create_libEnv( const std::string& input_string) {
+  Dakota::LibraryEnvironment* create_libEnv( const std::string& input_string,
+                                            const std::string& read_restart) {
 
       assert(!input_string.empty());
 
@@ -101,6 +102,10 @@ namespace python {
       // avoid calling std::exit and taking down the Python instance too
       opts.exit_mode("throw");
       opts.input_string(input_string);
+      if (!read_restart.empty())
+      {
+        opts.read_restart_file(read_restart);
+      };
 
       auto p_libEnv = new Dakota::LibraryEnvironment(opts);
 
@@ -170,10 +175,11 @@ PYBIND11_MODULE(environment, m) {
   py::class_<Dakota::LibraryEnvironment>(m, "study")
     .def(py::init
 	 ([](py::object callback,
-	     const std::string& input_string)
+	     const std::string& input_string,
+         const std::string& read_restart = "")
 	  {
 	    assert(!input_string.empty());
-            auto p_libEnv = Dakota::python::create_libEnv(input_string);
+            auto p_libEnv = Dakota::python::create_libEnv(input_string, read_restart);
 
             // Associate the single python callback with all Pybind11Interface interfaces
             Dakota::InterfaceList & interfaces = p_libEnv->problem_description_db().interface_list();
@@ -187,14 +193,15 @@ PYBIND11_MODULE(environment, m) {
 
 	    return p_libEnv;
 	  })
-	 , py::arg("callback"), py::arg("input_string"))
+	 , py::arg("callback"), py::arg("input_string"), py::arg("read_restart") = "")
 
     .def(py::init
 	 ([]( py::dict callbacks,
-	     const std::string& input_string)
+	     const std::string& input_string,
+         const std::string& read_restart = "")
 	  {
 	    assert(!input_string.empty());
-            auto p_libEnv = Dakota::python::create_libEnv(input_string);
+            auto p_libEnv = Dakota::python::create_libEnv(input_string, read_restart);
 
             // Associate callbacks with interface specs
             auto callbacks_map = callbacks.cast< std::map<std::string,py::function> >();
@@ -220,7 +227,7 @@ PYBIND11_MODULE(environment, m) {
 
 	    return p_libEnv;
 	  })
-	 , py::arg("callbacks"), py::arg("input_string"))
+	 , py::arg("callbacks"), py::arg("input_string"), py::arg("read_restart") = "")
 
     .def("execute", &Dakota::LibraryEnvironment::execute)
     .def("variables_results", &Dakota::LibraryEnvironment::variables_results)
